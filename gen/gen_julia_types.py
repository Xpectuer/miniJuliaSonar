"""
Author: Xpectuer
Email: xpectuer@gmail.com
This script is written by for code generation.

input: julia type declaration e.g.:

```julia
abstract type Any end
abstract type Nothing end
abstract type Missing end
abstract type Integer <: Real end
abstract type Signed <: Integer end
abstract type Unsigned <: Integer end
```

output: java source code for type instance definitions.
see (tech/jiayezheng/miniJuliaSonar/type/Types.java).

"""

import sys


# target = java


def read_file(path):
    with open(path, "r") as f:
        return f.read()


def delimit_lines(text):
    return text.split("\n")


def delimit(text):
    p = []
    lines = delimit_lines(text)
    for line in lines:
        t = line.split(" ")
        p.append(t)
    return p


def filter_list(f, l):
    r = []
    for e in l:
        if (f(e)):
            r.append(e)
    return r


def improve_data(p):
    q = []

    for line in p:
        if line != ['', '*']:
            q.append(filter_list(lambda e: (e not in ('end', 'type', '<:', '*', '')), line))
    return q


def gen_code(lines):
    any_type = 'AnyType'
    r = ""
    for line in lines:
        abstract = False
        name = 'undefined'
        super = 'undefined'
        size = 0

        for i in range(0, len(line)):
            e = line[i]
            if (i == 0):
                if (e == 'abstract'):
                    abstract = True
            elif (i == 1):
                name = e
            elif (i == 2):
                super = e + "Type"
            elif (i == 3):
                size = int(e)
            else:
                raise "Error in gen_code"

        format = "undefined"
        var = name + "Type"
        if (abstract):
            if (super == 'undefined'):
                if (var == 'AnyType'):
                    any_type = ''
                else:
                    any_type = ', AnyType'
                format = f"public static PrimType {var} = new PrimType(\"{name}\", null{any_type});"
            else:
                format = f"public static PrimType {var} = new PrimType(\"{name}\", null, {super});"
        else:
            if (super == 'undefined'):
                format = f"public static PrimType {var} = new PrimType(\"{name}\", null);\n\tpublic static Type {name}Instance = {var}.getInstance();\n\n"
            else:
                format = f"public static PrimType {var} = new PrimType(\"{name}\", null, {super});\n\tpublic static Type {name}Instance = {var}.getInstance();\n\n"

        print(format)
        r = r + ('\t' + format + "\n")

    return r


def usage():
    usage = """
Usage: python3 gen_julia_types.py [<filename>]
Note:  The script takes 1 or no argument. 
        If there isn't any arguments passed, read from stdin. 
    
    """
    print(usage)
    exit(2)


def opt():
    argv = sys.argv
    argc = len(argv)
    if argc == 1:
        return sys.stdin.read()
    elif argc == 2:
        if argv[1] in ("--help", '-h'):
            usage()
        return read_file(argv[1])
    else:
        return usage()


s = opt()
print("============== DEBUG ==============")
print("============== BEFORE ==============")
print(delimit(s))
print("============== AFTER ==============")
print(improve_data(delimit(s)))
print("============== DEBUG END ==============")

head = """

package tech.jiayezheng.miniJuliaSonar.type;
/** Generated Code, DO NOT MODIFY!!!
* This file is generated by gen_julia_types.py
* target = java
*/
public class Types {
    

"""

out = gen_code(improve_data(delimit(s)))

foot = """
    //  Synthetic types used only for inference purposes
    //  They don't exist in Julia

    public static Type UNKNOWN = new InstanceType(new PrimType("?", null));
    public static Type CONT = new InstanceType(new PrimType("None", null));
    public static PrimType BaseDict = new PrimType("dict", null);
    public static PrimType BaseVector = new PrimType("vector", null);
    public static Type BaseVectorInst = BaseVector.getInstance();
    public static PrimType BaseTuple = new PrimType("tuple", null);
    public static Type BaseTupleInst = BaseTuple.getInstance();

}

"""

with open("out.txt", "w") as f:
    f.write(head)
    f.write(out)
    f.write(foot)

print("============== CODE GENERATED ==============")
